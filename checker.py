# pypy3.10 checker.py -s docker_scout -i plone -v 5.2
import argparse
import json
import os
import re
import analysis

cve_data = []
report = './checker_report.json'


def get_image_version():
    if not args.version:
        return 'latest'
    else:
        return args.version

def scan_image():
    image_version = get_image_version()
    try:
        match args.scanner:
            case 'trivy':
                os.system(f'trivy image -f json -o {report} {args.image}:{image_version}')
            case 'grype':
                os.system(f'grype {args.image}:{image_version} -o json > {report}')
            case 'docker_scout':
                os.system(f'docker scout cves --format sarif --output {report} {args.image}:{image_version}') 
    except:
        print(f'{args.scanner} was not found. Have you installed it?')


def analyze_report():
    # data = analysis.find_cves(args.scanner, report)
    data2 = analysis.find_severity_levels(args.scanner, report)
    # print(data)
    print(data2)
    #analysis.get_cvss_level()
    #analysis.get_cwes()



def generate_report():
    with open(f'./test_report.json','w') as file:
        json.dump(cve_data ,file)

def start_scan():
    scan_image()
    analyze_report()
    generate_report()



parser = argparse.ArgumentParser(description='Checks image and generates report accordingly')
parser.add_argument('--scanner','-s', type=str,
                    help='Specifies which scanner should be used')
parser.add_argument('--image','-i', type=str,
                    help='Specifies which image should be scanned')
parser.add_argument('--version','-v', nargs='?', const='arg_was_not_given', 
                    help='Optionally, provide an image_version')
args = parser.parse_args()
start_scan()
