import argparse
import json
import os
import re

cve_data = []
report = './checker_report.json'


def get_image_version():
    if not args.version:
        return 'latest'
    else:
        return args.version

def scan_image():
    image_version = get_image_version()
    try:
        match args.scanner:
            case 'trivy':
                os.system(f'trivy image -f json -o ./checker_report.json {args.image}:{image_version}')
            case 'grype':
                os.system(f'grype {args.image}:{image_version} -o json > ./checker_report.json')
            case 'docker_scout':
                os.system(f'docker scout cves --format sarif --output ./checker_report.json {args.image}:{image_version}') 
    except:
        print(f'{args.scanner} was not found. Have you installed it?')

def find_cves():
    if not args.scanner == 'docker_scout':
        with open(report,'r') as f:
            file = f.read()
            cves = re.findall(r'CVE-[0-9]*-[0-9]*', file)
            cves = list(set(cves))
            for cve in cves:
                cve_struct = { 'id': '', 'severity': '','cvss': '', 'cwe': [] }
                cve_struct['id'] = cve
                cve_data.append(cve_struct)
    else:
        file = open(report,'r')
        file2 = json.load(file)
        for f in file2['runs'][0]['tool']['driver']['rules']:
            cve_struct = { 'id': '', 'severity': '','cvss': '', 'cwe': [] }
            cve_struct['id'] = f['id']
            cve_struct['severity'] = f['properties']['tags'][0]
            cve_struct['cvss'] = f['properties']['cvssV3_severity']
            cve_data.append(cve_struct)

def find_severity_levels():
    severity_levels = []
    if args.scanner == 'trivy':
        file = open(report,'r')
        json_file = json.load(file)
        for cve_struct in cve_data:
            try:
                for result in json_file['Results']:
                    for vulnerability in result['Vulnerabilities']:
                        if vulnerability['VulnerabilityID'] == cve_struct['id']:
                            cve_struct['severity'] = vulnerability['Severity']
            except:
                os.system(f'echo "{cve_struct}" >> remaining')
                continue

    if args.scanner == 'grype':
        file = open(report,'r')
        json_file = json.load(file)
        for vulnerabilities in json_file['matches']:
            if vulnerabilities['vulnerability']['id'] == cve_struct['id']:
                cve_struct['severity'] = vulnerabilities['vulnerability']['severity']

def get_cvss_level():
    if not args.scanner == 'docker_scout':
        for cve_struct in cve_data:
            score = 0
            file = os.popen(f'grep -rnw "./nvd" -e {cve_struct["id"]}').read().split(':')[0]
            if file == '':
                continue
            test = open(file,'r')
            test2 = json.load(test)
            for index in range(len(test2["CVE_Items"])):
                if test2["CVE_Items"][index]["cve"]["CVE_data_meta"]["ID"] == cve_struct['id']:
                    try:
                        values = []
                        for value in test2["CVE_Items"][index]["impact"]: values.append(value)
                        if values[0] == 'baseMetricV3':
                            score = test2["CVE_Items"][index]["impact"][values[0]]["cvssV3"]["baseScore"]
                        if values[0] == 'baseMetricV2':
                            score = test2["CVE_Items"][index]["impact"][values[0]]["cvssV2"]["baseScore"]

                        for index in range(len(test2["CVE_Items"][index]["cve"]["problemtype"]["problemtype_data"][0]["description"])):
                            cve_struct['cvss'].append(test2["CVE_Items"][index]["cve"]["problemtype"]["problemtype_data"][0]["description"][index]["value"])
                    except:
                        os.system(f'echo "{cve_struct}" >> remaining')
                        continue

            index = 0
            cvss = 'none'
            if score >= 0.1 and score <= 3.9:
                cvss = 'low'
            if score >= 4.0 and score <= 6.9:
                cvss = 'medium'
            if score >= 7.0 and score <= 8.9:
                cvss = 'high'
            if score >= 9.0:
                cvss = 'critical'

            cve_struct['cvss'] = cvss
            generate_report()

def get_cwes():
    if args.scanner == 'docker_scout':
        for cve_struct in cve_data:
            score = 0
            file = os.popen(f'grep -rnw "./nvd" -e {cve_struct["id"]}').read().split(':')[0]
            if file == '':
                continue
            test = open(file,'r')
            test2 = json.load(test)
            for index in range(len(test2["CVE_Items"])):
                if test2["CVE_Items"][index]["cve"]["CVE_data_meta"]["ID"] == cve_struct['id']:
                    try:
                        for index in range(len(test2["CVE_Items"][index]["cve"]["problemtype"]["problemtype_data"][0]["description"])):
                            cve_struct['cwe'].append(test2["CVE_Items"][index]["cve"]["problemtype"]["problemtype_data"][0]["description"][index]["value"])
                    except:
                        os.system(f'echo "{cve_struct}" >> cves_without_cwe')
                        continue



def analyze_report():
    find_cves()
    find_severity_levels()
    get_cvss_level()
    get_cwes()



def generate_report():
    with open(f'./test_report.json','w') as file:
        json.dump(cve_data ,file)

def start_scan():
    scan_image()
    analyze_report()
    generate_report()



parser = argparse.ArgumentParser(description='Checks image and generates report accordingly')
parser.add_argument('--scanner','-s', type=str,
                    help='Specifies which scanner should be used')
parser.add_argument('--image','-i', type=str,
                    help='Specifies which image should be scanned')
parser.add_argument('--version','-v', nargs='?', const='arg_was_not_given', 
                    help='Optionally, provide an image_version')
args = parser.parse_args()
start_scan()
